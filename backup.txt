void BottomUpClustering::GetEventsInCluster(Int_t k, Double_t& ttbar, Double_t& ttv, Double_t& tth,Double_t& ttbar_e, Double_t& ttv_e, Double_t& tth_e)
{
  //  cout << "Getting events in cluster" << endl;
  //  cout << clusters.size() << " " << k << endl;
  ttbar   = 0.;
  ttv     = 0.;
  tth     = 0.;  
  ttbar_e = 0.;
  ttv_e   = 0.;
  tth_e   = 0.;  
  for (int i = 1; i < hFineBinning->GetXaxis()->GetNbins()+1; ++i){
    for (int j = 1; j < hFineBinning->GetXaxis()->GetNbins()+1; ++j){
      Int_t bin = hFineBinning->GetBin(i,j);
      if (hTargetBinning->GetBinContent(bin) != k) continue;
      ttbar   += hFineTTbar -> GetBinContent( hFineTTbar -> FindBin(bin) );
      ttv     += hFineTTW   -> GetBinContent( hFineTTW   -> FindBin(bin) );
      tth     += hFineTTH   -> GetBinContent( hFineTTH   -> FindBin(bin) );
      ttbar_e += TMath::Power(hFineTTbar -> GetBinError( hFineTTbar   -> FindBin(bin) ),2);
      ttv_e   += TMath::Power(hFineTTW   -> GetBinError( hFineTTW     -> FindBin(bin) ),2);
      tth_e   += TMath::Power(hFineTTH   -> GetBinError( hFineTTH     -> FindBin(bin) ),2);
    }
  }
  cout << ttbar << endl;
  ttbar_e = TMath::Sqrt(ttbar_e);
  ttv_e   = TMath::Sqrt(ttv_e  );
  tth_e   = TMath::Sqrt(tth_e  );
  return;
}

void BottomUpClustering::MakeFineBinning()
{
  cout << "Making fine binning " << endl;
  hFineBinning = new TH2F("hFineBinning","",20,-1.,1.,20,-1.,1.);
  int counter = 0;
  for (int i = 0; i < hFineBinning->GetXaxis()->GetNbins(); ++i){
    for (int j = 0; j < hFineBinning->GetYaxis()->GetNbins(); ++j){
      hFineBinning->SetBinContent(hFineBinning->GetBin(i+1,j+1),counter);
      vector<Int_t> vct; vct.push_back(hFineBinning->GetBin(i+1,j+1));
      clusters.push_back(vct);
      counter++;
    }
  }
  // we start from the fine binning
  hTargetBinning = (TH2F*) hFineBinning->Clone("hTargetBinning");

  // now getting how the train data is distributed
  Int_t fineBins = hFineBinning->GetXaxis()->GetNbins()*hFineBinning->GetYaxis()->GetNbins();
  hFineTTbar = new TH1F("hFineTTbar","",fineBins,-0.5,fineBins-0.5);
  hFineTTW   = new TH1F("hFineTTW"  ,"",fineBins,-0.5,fineBins-0.5);
  hFineTTH   = new TH1F("hFineTTH"  ,"",fineBins,-0.5,fineBins-0.5);
  
  for (auto& pt : fTTbar){
    hFineTTbar->Fill(hFineBinning->GetBinContent( hFineBinning->FindBin(pt.fX, pt.fY) ), pt.fW);
  }
  for (auto& pt : fTTW){
    hFineTTW->Fill(hFineBinning->GetBinContent( hFineBinning->FindBin(pt.fX, pt.fY) ), pt.fW);
  }
  for (auto& pt : fTTH){
    hFineTTH->Fill(hFineBinning->GetBinContent( hFineBinning->FindBin(pt.fX, pt.fY) ), pt.fW);
  }

  //  cout << "histo is " << hFineTTbar << endl;

  return;
}
